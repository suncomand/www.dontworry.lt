{"ast":null,"code":"import { create } from 'zustand';\nconst useStore = create(set => ({\n  username: '',\n  password1: '',\n  password2: '',\n  // Store for posts, initialized as empty\n  posts: [],\n  // Store for user data (single user data)\n  userData: {\n    username: '',\n    profileImageUrl: ''\n  },\n  // Set user data in store (called after login or profile update)\n  setUserData: (username, profileImageUrl) => set({\n    userData: {\n      username,\n      profileImageUrl\n    }\n  }),\n  // Action to update username, password1, and password2 for registration\n  setRegistrationData: (username, password1, password2) => set({\n    username,\n    password1,\n    password2\n  }),\n  // Add post action\n  addPost: (description, imageUrl) => set(state => ({\n    posts: [...state.posts, {\n      id: Date.now(),\n      // Unique id based on current timestamp\n      description,\n      imageUrl,\n      username: state.userData.username // Store the username with each post\n    }]\n  })),\n  // Delete post action\n  deletePost: postId => set(state => ({\n    posts: state.posts.filter(post => post.id !== postId) // Remove the post by id\n  }))\n}));\nexport default useStore;","map":{"version":3,"names":["create","useStore","set","username","password1","password2","posts","userData","profileImageUrl","setUserData","setRegistrationData","addPost","description","imageUrl","state","id","Date","now","deletePost","postId","filter","post"],"sources":["/Users/martynasdzindzeleta/WebstormProjects/HOMEWORK/src/store/main.js"],"sourcesContent":["import { create } from 'zustand';\n\nconst useStore = create((set) => ({\n    username: '',\n    password1: '',\n    password2: '',\n\n    // Store for posts, initialized as empty\n    posts: [],\n\n    // Store for user data (single user data)\n    userData: { username: '', profileImageUrl: '' },\n\n    // Set user data in store (called after login or profile update)\n    setUserData: (username, profileImageUrl) =>\n        set({ userData: { username, profileImageUrl } }),\n\n    // Action to update username, password1, and password2 for registration\n    setRegistrationData: (username, password1, password2) =>\n        set({ username, password1, password2 }),\n\n    // Add post action\n    addPost: (description, imageUrl) => set((state) => ({\n        posts: [\n            ...state.posts,\n            {\n                id: Date.now(), // Unique id based on current timestamp\n                description,\n                imageUrl,\n                username: state.userData.username // Store the username with each post\n            }\n        ]\n    })),\n\n    // Delete post action\n    deletePost: (postId) => set((state) => ({\n        posts: state.posts.filter((post) => post.id !== postId) // Remove the post by id\n    }))\n}));\n\nexport default useStore;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAEhC,MAAMC,QAAQ,GAAGD,MAAM,CAAEE,GAAG,KAAM;EAC9BC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE,EAAE;EACbC,SAAS,EAAE,EAAE;EAEb;EACAC,KAAK,EAAE,EAAE;EAET;EACAC,QAAQ,EAAE;IAAEJ,QAAQ,EAAE,EAAE;IAAEK,eAAe,EAAE;EAAG,CAAC;EAE/C;EACAC,WAAW,EAAEA,CAACN,QAAQ,EAAEK,eAAe,KACnCN,GAAG,CAAC;IAAEK,QAAQ,EAAE;MAAEJ,QAAQ;MAAEK;IAAgB;EAAE,CAAC,CAAC;EAEpD;EACAE,mBAAmB,EAAEA,CAACP,QAAQ,EAAEC,SAAS,EAAEC,SAAS,KAChDH,GAAG,CAAC;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAU,CAAC,CAAC;EAE3C;EACAM,OAAO,EAAEA,CAACC,WAAW,EAAEC,QAAQ,KAAKX,GAAG,CAAEY,KAAK,KAAM;IAChDR,KAAK,EAAE,CACH,GAAGQ,KAAK,CAACR,KAAK,EACd;MACIS,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MAAE;MAChBL,WAAW;MACXC,QAAQ;MACRV,QAAQ,EAAEW,KAAK,CAACP,QAAQ,CAACJ,QAAQ,CAAC;IACtC,CAAC;EAET,CAAC,CAAC,CAAC;EAEH;EACAe,UAAU,EAAGC,MAAM,IAAKjB,GAAG,CAAEY,KAAK,KAAM;IACpCR,KAAK,EAAEQ,KAAK,CAACR,KAAK,CAACc,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACN,EAAE,KAAKI,MAAM,CAAC,CAAC;EAC5D,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,eAAelB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}