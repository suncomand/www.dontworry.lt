{"ast":null,"code":"import { create } from 'zustand';\nconst useStore = create(set => ({\n  // Registration and user data\n  username: '',\n  password1: '',\n  password2: '',\n  // Store for posts\n  posts: [],\n  // Store for users\n  allUsers: [],\n  // Store for messages\n  messages: [],\n  // Set user data in store (called after login or profile update)\n  setUserData: (username, profileImageUrl) => set(state => ({\n    allUsers: [...state.allUsers, {\n      id: Date.now(),\n      username,\n      profileImageUrl,\n      messages: []\n    }]\n  })),\n  // Action to update registration data\n  setRegistrationData: (username, password1, password2) => set({\n    username,\n    password1,\n    password2\n  }),\n  // Add a message to the store\n  addMessage: (sender, receiver, message) => set(state => ({\n    messages: [...state.messages, {\n      sender,\n      receiver,\n      message,\n      timestamp: Date.now()\n    }]\n  })),\n  // Add post action\n  addPost: (description, imageUrl) => set(state => ({\n    posts: [...state.posts, {\n      id: Date.now(),\n      description,\n      imageUrl,\n      username: state.username\n    }]\n  })),\n  // Delete post action\n  deletePost: postId => set(state => ({\n    posts: state.posts.filter(post => post.id !== postId)\n  })),\n  // Send a message between users\n  sendMessage: (userId, message) => {\n    set(state => {\n      const users = state.allUsers.map(user => user.id === userId ? {\n        ...user,\n        messages: [...user.messages, {\n          text: message,\n          sender: 'You'\n        }]\n      } : user);\n      return {\n        allUsers: users\n      };\n    });\n  },\n  // Get a user's messages\n  getUserMessages: userId => {\n    const user = state.allUsers.find(u => u.id === userId);\n    return user ? user.messages : [];\n  }\n}));\nexport default useStore;","map":{"version":3,"names":["create","useStore","set","username","password1","password2","posts","allUsers","messages","setUserData","profileImageUrl","state","id","Date","now","setRegistrationData","addMessage","sender","receiver","message","timestamp","addPost","description","imageUrl","deletePost","postId","filter","post","sendMessage","userId","users","map","user","text","getUserMessages","find","u"],"sources":["/Users/martynasdzindzeleta/WebstormProjects/HOMEWORK/src/store/main.js"],"sourcesContent":["import { create } from 'zustand';\n\nconst useStore = create((set) => ({\n    // Registration and user data\n    username: '',\n    password1: '',\n    password2: '',\n\n    // Store for posts\n    posts: [],\n\n    // Store for users\n    allUsers: [],\n\n    // Store for messages\n    messages: [],\n\n    // Set user data in store (called after login or profile update)\n    setUserData: (username, profileImageUrl) =>\n        set((state) => ({\n            allUsers: [\n                ...state.allUsers,\n                { id: Date.now(), username, profileImageUrl, messages: [] }\n            ]\n        })),\n\n    // Action to update registration data\n    setRegistrationData: (username, password1, password2) =>\n        set({ username, password1, password2 }),\n\n    // Add a message to the store\n    addMessage: (sender, receiver, message) =>\n        set((state) => ({\n            messages: [\n                ...state.messages,\n                { sender, receiver, message, timestamp: Date.now() }\n            ]\n        })),\n\n    // Add post action\n    addPost: (description, imageUrl) => set((state) => ({\n        posts: [\n            ...state.posts,\n            {\n                id: Date.now(),\n                description,\n                imageUrl,\n                username: state.username\n            }\n        ]\n    })),\n\n    // Delete post action\n    deletePost: (postId) => set((state) => ({\n        posts: state.posts.filter((post) => post.id !== postId)\n    })),\n\n    // Send a message between users\n    sendMessage: (userId, message) => {\n        set((state) => {\n            const users = state.allUsers.map(user =>\n                user.id === userId\n                    ? { ...user, messages: [...user.messages, { text: message, sender: 'You' }] }\n                    : user\n            );\n            return { allUsers: users };\n        });\n    },\n\n    // Get a user's messages\n    getUserMessages: (userId) => {\n        const user = state.allUsers.find(u => u.id === userId);\n        return user ? user.messages : [];\n    }\n}));\n\nexport default useStore;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAEhC,MAAMC,QAAQ,GAAGD,MAAM,CAAEE,GAAG,KAAM;EAC9B;EACAC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE,EAAE;EACbC,SAAS,EAAE,EAAE;EAEb;EACAC,KAAK,EAAE,EAAE;EAET;EACAC,QAAQ,EAAE,EAAE;EAEZ;EACAC,QAAQ,EAAE,EAAE;EAEZ;EACAC,WAAW,EAAEA,CAACN,QAAQ,EAAEO,eAAe,KACnCR,GAAG,CAAES,KAAK,KAAM;IACZJ,QAAQ,EAAE,CACN,GAAGI,KAAK,CAACJ,QAAQ,EACjB;MAAEK,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MAAEX,QAAQ;MAAEO,eAAe;MAAEF,QAAQ,EAAE;IAAG,CAAC;EAEnE,CAAC,CAAC,CAAC;EAEP;EACAO,mBAAmB,EAAEA,CAACZ,QAAQ,EAAEC,SAAS,EAAEC,SAAS,KAChDH,GAAG,CAAC;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAU,CAAC,CAAC;EAE3C;EACAW,UAAU,EAAEA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,KAClCjB,GAAG,CAAES,KAAK,KAAM;IACZH,QAAQ,EAAE,CACN,GAAGG,KAAK,CAACH,QAAQ,EACjB;MAAES,MAAM;MAAEC,QAAQ;MAAEC,OAAO;MAAEC,SAAS,EAAEP,IAAI,CAACC,GAAG,CAAC;IAAE,CAAC;EAE5D,CAAC,CAAC,CAAC;EAEP;EACAO,OAAO,EAAEA,CAACC,WAAW,EAAEC,QAAQ,KAAKrB,GAAG,CAAES,KAAK,KAAM;IAChDL,KAAK,EAAE,CACH,GAAGK,KAAK,CAACL,KAAK,EACd;MACIM,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdQ,WAAW;MACXC,QAAQ;MACRpB,QAAQ,EAAEQ,KAAK,CAACR;IACpB,CAAC;EAET,CAAC,CAAC,CAAC;EAEH;EACAqB,UAAU,EAAGC,MAAM,IAAKvB,GAAG,CAAES,KAAK,KAAM;IACpCL,KAAK,EAAEK,KAAK,CAACL,KAAK,CAACoB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACf,EAAE,KAAKa,MAAM;EAC1D,CAAC,CAAC,CAAC;EAEH;EACAG,WAAW,EAAEA,CAACC,MAAM,EAAEV,OAAO,KAAK;IAC9BjB,GAAG,CAAES,KAAK,IAAK;MACX,MAAMmB,KAAK,GAAGnB,KAAK,CAACJ,QAAQ,CAACwB,GAAG,CAACC,IAAI,IACjCA,IAAI,CAACpB,EAAE,KAAKiB,MAAM,GACZ;QAAE,GAAGG,IAAI;QAAExB,QAAQ,EAAE,CAAC,GAAGwB,IAAI,CAACxB,QAAQ,EAAE;UAAEyB,IAAI,EAAEd,OAAO;UAAEF,MAAM,EAAE;QAAM,CAAC;MAAE,CAAC,GAC3Ee,IACV,CAAC;MACD,OAAO;QAAEzB,QAAQ,EAAEuB;MAAM,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC;EAED;EACAI,eAAe,EAAGL,MAAM,IAAK;IACzB,MAAMG,IAAI,GAAGrB,KAAK,CAACJ,QAAQ,CAAC4B,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACxB,EAAE,KAAKiB,MAAM,CAAC;IACtD,OAAOG,IAAI,GAAGA,IAAI,CAACxB,QAAQ,GAAG,EAAE;EACpC;AACJ,CAAC,CAAC,CAAC;AAEH,eAAeP,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}