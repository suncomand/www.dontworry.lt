{"ast":null,"code":"import { create } from 'zustand';\nconst useStore = create(set => ({\n  username: '',\n  password1: '',\n  password2: '',\n  // Store for posts, initialized as empty\n  posts: [],\n  // Store for multiple users (array of users)\n  allUsers: [],\n  // Set user data in store (called after login or profile update)\n  setUserData: (username, profileImageUrl) => set(state => ({\n    allUsers: [...state.allUsers, {\n      username,\n      profileImageUrl\n    } // Add the new user to the array\n    ]\n  })),\n  // Action to update username, password1, and password2 for registration\n  setRegistrationData: (username, password1, password2) => set({\n    username,\n    password1,\n    password2\n  }),\n  // Add post action\n  addPost: (description, imageUrl) => set(state => ({\n    posts: [...state.posts, {\n      id: Date.now(),\n      // Unique id based on current timestamp\n      description,\n      imageUrl,\n      username: state.username // Store the username with each post\n    }]\n  })),\n  // Delete post action\n  deletePost: postId => set(state => ({\n    posts: state.posts.filter(post => post.id !== postId) // Remove the post by id\n  }))\n}));\nexport default useStore;","map":{"version":3,"names":["create","useStore","set","username","password1","password2","posts","allUsers","setUserData","profileImageUrl","state","setRegistrationData","addPost","description","imageUrl","id","Date","now","deletePost","postId","filter","post"],"sources":["/Users/martynasdzindzeleta/WebstormProjects/HOMEWORK/src/store/main.js"],"sourcesContent":["import { create } from 'zustand';\n\nconst useStore = create((set) => ({\n    username: '',\n    password1: '',\n    password2: '',\n\n    // Store for posts, initialized as empty\n    posts: [],\n\n    // Store for multiple users (array of users)\n    allUsers: [],\n\n    // Set user data in store (called after login or profile update)\n    setUserData: (username, profileImageUrl) =>\n        set((state) => ({\n            allUsers: [\n                ...state.allUsers,\n                { username, profileImageUrl } // Add the new user to the array\n            ]\n        })),\n\n    // Action to update username, password1, and password2 for registration\n    setRegistrationData: (username, password1, password2) =>\n        set({ username, password1, password2 }),\n\n    // Add post action\n    addPost: (description, imageUrl) => set((state) => ({\n        posts: [\n            ...state.posts,\n            {\n                id: Date.now(), // Unique id based on current timestamp\n                description,\n                imageUrl,\n                username: state.username // Store the username with each post\n            }\n        ]\n    })),\n\n    // Delete post action\n    deletePost: (postId) => set((state) => ({\n        posts: state.posts.filter((post) => post.id !== postId) // Remove the post by id\n    }))\n}));\n\nexport default useStore;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAEhC,MAAMC,QAAQ,GAAGD,MAAM,CAAEE,GAAG,KAAM;EAC9BC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE,EAAE;EACbC,SAAS,EAAE,EAAE;EAEb;EACAC,KAAK,EAAE,EAAE;EAET;EACAC,QAAQ,EAAE,EAAE;EAEZ;EACAC,WAAW,EAAEA,CAACL,QAAQ,EAAEM,eAAe,KACnCP,GAAG,CAAEQ,KAAK,KAAM;IACZH,QAAQ,EAAE,CACN,GAAGG,KAAK,CAACH,QAAQ,EACjB;MAAEJ,QAAQ;MAAEM;IAAgB,CAAC,CAAC;IAAA;EAEtC,CAAC,CAAC,CAAC;EAEP;EACAE,mBAAmB,EAAEA,CAACR,QAAQ,EAAEC,SAAS,EAAEC,SAAS,KAChDH,GAAG,CAAC;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAU,CAAC,CAAC;EAE3C;EACAO,OAAO,EAAEA,CAACC,WAAW,EAAEC,QAAQ,KAAKZ,GAAG,CAAEQ,KAAK,KAAM;IAChDJ,KAAK,EAAE,CACH,GAAGI,KAAK,CAACJ,KAAK,EACd;MACIS,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MAAE;MAChBJ,WAAW;MACXC,QAAQ;MACRX,QAAQ,EAAEO,KAAK,CAACP,QAAQ,CAAC;IAC7B,CAAC;EAET,CAAC,CAAC,CAAC;EAEH;EACAe,UAAU,EAAGC,MAAM,IAAKjB,GAAG,CAAEQ,KAAK,KAAM;IACpCJ,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAACc,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACN,EAAE,KAAKI,MAAM,CAAC,CAAC;EAC5D,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,eAAelB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}